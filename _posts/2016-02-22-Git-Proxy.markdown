---
layout: post
title:  "Git Proxy"
categories: Git
comments: True
---

## Goal

Proposing a system allowing users to pull files from a local server. This is useful when the main server is geographically distant and connection slow.

## Disclaimer

This is purely experimental! I'm not even sure it would work in real life, and there are problably a ton of workflows which could end up being broken

## The solution ##

- *Octodemo* is the central remote server, and the repo we want to make available is `https://octodemo.com/OctoCheese/Calculator`
- We will use another Git server or GitHub Enteprise instance, on the local site, say *octodemoproxy.com*.
- We need a third machine, somewhere (remote or local). Let's call it *octodemosync*.

#### On *octodemosync* ####

```
git clone https://octodemo.com/OctoCheese/Calculator.git
cd Calculator
```
 We'll create a file `doSync.sh` in this directory with the following content :

```
for remote in `git branch -r | grep -v \>`; do git branch --track ${remote#origin/} $remote; done
for branch in `git branch -r | grep -v \>`; do git checkout ${branch#origin/}; git pull --rebase; done
git push --all --force
```

Make sure you make this file exectuable

```
chmod u+x doSync.sh
```

 Now we want make sure this file doesn't get pushed to the repo, so make sure you add it to `.gitignore` and commit/push the file

```
echo "doSync.sh" >> .gitignore
git commit -m "ignore doSync" .gitignore
git push origin
```

Now create a new repo on *octodemoproxy.com*. That would be `https://octodemoproxy.com/OctoCheese/Calculator` or whatever else you want. It's **not a clone**. You obviously need push access on this repo, and you actually be the only one being allowed to push there.

Still on *octodemosync*

```
git remote set-url --push origin https://octodemoproxy.com/OctoCheese/Calculator.git
```

Now let's check where we are

```
> git remote -v
origin	https://octodemo.com/OctoCheese/Calculator.git (fetch)
origin	https://octodemoproxy.com/OctoCheese/Calculator.git (push)
> git branch
* master
```

Now run `doSynch.sh`

```
>./doSync.sh
Branch bug-fix set up to track remote branch bug-fix from origin.
Branch deploy set up to track remote branch deploy from origin.
fatal: A branch named 'master' already exists.
Branch payment set up to track remote branch payment from origin.
Switched to branch 'bug-fix'
Your branch is up-to-date with 'origin/bug-fix'.
Current branch bug-fix is up to date.
Switched to branch 'deploy'
Your branch is up-to-date with 'origin/deploy'.
Current branch deploy is up to date.
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
Current branch master is up to date.
Counting objects: 1023, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (350/350), done.
Writing objects: 100% (1023/1023), 149.38 KiB | 0 bytes/s, done.
Total 1023 (delta 260), reused 1023 (delta 260)
To https://octoalaindemo/SoftwareDepartment/Calculator.git
 * [new branch]      bug-fix -> bug-fix
 * [new branch]      deploy -> deploy
 * [new branch]      master -> master
```

Let's check again what we have

```
git branch
  bug-fix
  deploy
* master
```

The repo on *octodemoproxy.com* should match  *octodemo.com*
Now you just need to schedule the execution of this `doSync.sh` script every so often.

####On the developer machine####

We are cloning the repo from the proxy and changing the push remote to octodemo.

```
git clone https://octodemoproxy.com/OctoCheese/Calculator.git
cd Calculator
git remote set-url --push origin https://octodemo.com/OctoCheese/Calculator.git
```

The user can now push and pull normally, and everything should be transparent provided `doSync.sh`runs often enough.
